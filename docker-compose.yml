# docker-compose up --scale web=3 --scale celery=5
services:
  nginx:
    image: nginx:1.27-alpine
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
      - ./nginx/logs:/var/log/nginx
      - .:/app:consistent
    networks:
      - internal-net
    restart: unless-stopped
    depends_on:
      - web

    ports:
      - "80:80"
      - "443:443"

  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DOCKER_GID: ${DOCKER_GID}
    image: vulschedula-app:latest # Built image
    #privileged: true
    command: >
      sh -c "
        ./wait-for-it.sh postgres:5432 -- 
        ./wait-for-it.sh redis:6379 -- 
        ./wait-for-it.sh rabbitmq:5672 -- 
      "
      #./wait-for-it.sh docker:2375 --timeout=30 --

    ports:
      - "8080:8080"
    user: www-data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
    restart: on-failure
    env_file:
      - variables.env
    environment:
      - SERVICE_TYPE=web
    volumes:
      - .:/app:consistent # Consider limiting if not necessary for all services
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - internal-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/"]
      interval: 30s
      timeout: 10s
      retries: 5

  #Celery Worker Service
  celery:
    image: vulschedula-app:latest
    command: >
      sh -c "
        ./wait-for-it.sh web:8080 -- 
        watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- celery -A main worker --loglevel=info
      "
      # celery -A main worker --loglevel=info
      # command: ["celery", "-A", "main", "worker", "--loglevel=info"]
    user: www-data
    depends_on:
      - redis
      - rabbitmq
      - web
    restart: on-failure
    env_file:
      - variables.env
    environment:
      - SERVICE_TYPE=celery
      - /var/run/docker.sock:/var/run/docker.sock
    volumes:
      - .:/app:consistent
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - internal-net
    healthcheck:
      test: ["CMD", "celery", "-A", "main", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Celery Beat Service
  celery-beat:
    image: vulschedula-app:latest

    command: >
      sh -c "
        ./wait-for-it.sh web:8080 -- 
        watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- celery -A main beat  --loglevel=info
      "
      # celery -A main beat -s /celery/celerybeat-schedule --loglevel=info
      # command: ["celery", "-A", "main", "worker", "--loglevel=info"]
      #command: ["celery", "-A", "main", "beat", "--loglevel=info"]
    depends_on:
      - redis
      - rabbitmq
      - web
    user: www-data
    restart: on-failure
    env_file:
      - variables.env
    environment:
      - SERVICE_TYPE=celery-beat
    volumes:
      - .:/app:consistent
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - internal-net
    healthcheck:
      test: ["CMD", "pgrep", "celery"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Postgres Database
  postgres:
    image: postgres:14.5
    restart: always
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    env_file:
      - variables.env
    networks:
      - internal-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15673:15672" # Management UI port
      # - "5672:5672"  # Uncomment if external AMQP access is needed
    restart: always
    env_file:
      - variables.env
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
    networks:
      - internal-net
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis In-Memory Data Store
  redis:
    image: redis:7.0-alpine
    restart: always
    env_file:
      - variables.env
    volumes:
      - ./data/redis:/data
    networks:
      - internal-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  internal-net:
    driver: bridge
